<!doctype html>
<html lang="en">
  <head>
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <script src="//cdnjs.cloudflare.com/ajax/libs/three.js/r67/three.min.js"></script>
    <!--<script src="js/RequestAnimationFrame.js"></script>-->
    <script src="js/Detector.js"></script>
    <script src="js/FirstPersonControls.js"></script>
    <script src="js/KeyboardState.js"></script>
    <script src="js/THREEx.FullScreen.js"></script>
  </head>
  <body>
    <div id="ThreeJS" style="position: absolute; left:0px; top:0px"></div>
    <script>
      var container, scene, camera, renderer, controls;
      var keyboard = new KeyboardState();
      var clock = new THREE.Clock();

      var obj;

      init();
      animate();
      function init() 
      {
        // SCENE
        scene = new THREE.Scene();
        // CAMERA
        var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;
        var VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 20000;
        camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
        scene.add(camera);
        camera.position.set(0,5,30);
        camera.lookAt(0,5,31);//scene.position);  
        // RENDERER
        if ( Detector.webgl ) {
          renderer = new THREE.WebGLRenderer( {antialias:true} );
        }
        else {
          renderer = new THREE.CanvasRenderer(); 
        }
        renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        container = document.getElementById( 'ThreeJS' );
        container.appendChild( renderer.domElement );
        // EVENTS
        THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
        // CONTROLS
        controls = new THREE.FirstPersonControls( camera, renderer.domElement );
        //controls.movementSpeed = 70;
        //controls.lookSpeed = 0.05;
        //controls.noFly = true;
        //controls.lookVertical = false;
        // LIGHT
        var light = new THREE.AmbientLight( "#404040" );
        scene.add(light);
        light = new THREE.DirectionalLight( "white", 0.25 );
        light.position.set(1,1,2);
        scene.add(light);
        //light = new THREE.PointLight(0xffffff);
        //light.position.set(1,2.5,1);
        //scene.add(light);
        // SKYBOX
        var skyBoxGeometry = new THREE.BoxGeometry( 10000, 10000, 10000 );
        var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
        var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
        scene.add(skyBox);


        // SCENE
        var manager = new THREE.LoadingManager();
        var geometry, material;
        <% for prim in primitives %>
        geometry = new THREE.<%= prim[:render_call] %>;
        material = new THREE.MeshLambertMaterial({
          <% if prim[:texture].nil? %>
          color: <%= prim[:color] %>
          <% else %>
          map: THREE.ImageUtils.loadTexture('<%= prim[:texture] %>')
          <% end %>
        });
        obj = new THREE.Mesh(geometry, material);
        obj.position.set<%= prim[:position] %>;
        obj.rotation.set<%= prim[:rotation] %>;
        obj.scale.set<%= prim[:scale] %>;
        scene.add(obj);
        <% end %>
        <% unless meshes.empty? %>
        var loader = new THREE.JSONLoader(); 
        <% for mesh in meshes %>
        loader.load('<%= mesh[:path] %>', function (geometry) {
          material = new THREE.MeshLambertMaterial({
            <% if mesh[:texture].nil? %>
            color: <%= mesh[:color] %>
            <% else %>
            map: THREE.ImageUtils.loadTexture('<%= mesh[:texture] %>')
            <% end %>
          });
          obj = new THREE.Mesh(geometry,material);
          obj.position.set<%= mesh[:position] %>;
          obj.rotation.set<%= mesh[:rotation] %>;
          obj.scale.set<%= mesh[:scale] %>;
          scene.add(obj);
        });
        <% end %>
        <% end %>
        /*var floorTexture = new THREE.ImageUtils.loadTexture( 'images/checkerboard.jpg' );
        floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
        floorTexture.repeat.set( 10, 10 );
        var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );*/
      }

      function animate() 
      {
        requestAnimationFrame( animate );
        render();   
        update();
      }

      function update()
      {
        if ( keyboard.pressed("z") ) 
        {   
          // do something
        }
      }

      function render() 
      {
        //controls.movementSpeed = 0.33;
        controls.update( clock.getDelta() );
        renderer.render( scene, camera );
      }

      function onWindowResize()
      {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
        controls.handleResize();
      }
    </script>
  </body>
</html>