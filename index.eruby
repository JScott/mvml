
<!DOCTYPE html>
<html lang="en">
  <head>
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link rel="stylesheet" type="text/css" href="css/main.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/three.js/r67/three.min.js"></script>
    <script src="js/Detector.js"></script>
    <script src="js/FlyControls.js"></script>
    <script src="js/THREEx/KeyboardState.js"></script>
  </head>

  <body>

    <div id="info"><br/><%= motd %><br/><br/>
    <b>WASD</b> move, <b>mouse|arrow</b> look around<br/>
    </div>

    <script>   
      var container;
      var camera, controls, scene, renderer;
      var keyboard = new THREEx.KeyboardState();

      var SCREEN_WIDTH = window.innerWidth;
      var SCREEN_HEIGHT = window.innerHeight;
      var SCREEN_ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT;

      var clock = new THREE.Clock();

      init();
      animate();

      function init() {
        // CONTAINER
        container = document.createElement( 'div' );
        document.body.appendChild( container );

        // SCENE
        scene = new THREE.Scene();

        // CAMERA
        var fov = 45;
        var aspect = SCREEN_WIDTH/SCREEN_HEIGHT;
        var near = 0.1;
        var far = 20000;
        camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
        scene.add(camera);
        camera.position.set(0,5,30);

        // CONTROLS
        controls = new THREE.FlyControls( camera );
        controls.domElement = container;
        controls.movementSpeed = 15;
        controls.rollSpeed = 1.5;
        controls.autoForward = false;
        controls.dragToLook = true;

        // LIGHT
        var light = new THREE.AmbientLight( "#404040" );
        scene.add(light);
        light = new THREE.DirectionalLight( "white", 0.25 );
        light.position.set(1,1,2);
        scene.add(light);

        // SKYBOX
        var skyBoxGeometry = new THREE.BoxGeometry( 10000, 10000, 10000 );
        var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
        var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
        scene.add(skyBox);

        // SCENE
        var manager = new THREE.LoadingManager();
        var geometry, material;
        <% for prim in primitives %>
        geometry = new THREE.<%= prim[:render_call] %>;
        material = new THREE.MeshLambertMaterial({
          <% if prim[:texture].nil? %>
          color: <%= prim[:color] %>
          <% else %>
          map: THREE.ImageUtils.loadTexture('<%= prim[:texture] %>')
          <% end %>
        });
        obj = new THREE.Mesh(geometry, material);
        obj.position.set<%= prim[:position] %>;
        obj.rotation.set<%= prim[:rotation] %>;
        obj.scale.set<%= prim[:scale] %>;
        scene.add(obj);
        <% end %>
        <% unless meshes.empty? %>
        var loader = new THREE.JSONLoader(); 
        <% for mesh in meshes %>
        loader.load('<%= mesh[:path] %>', function (geometry) {
          material = new THREE.MeshLambertMaterial({
            <% if mesh[:texture].nil? %>
            color: <%= mesh[:color] %>
            <% else %>
            map: THREE.ImageUtils.loadTexture('<%= mesh[:texture] %>')
            <% end %>
          });
          obj = new THREE.Mesh(geometry,material);
          obj.position.set<%= mesh[:position] %>;
          obj.rotation.set<%= mesh[:rotation] %>;
          obj.scale.set<%= mesh[:scale] %>;
          scene.add(obj);
        });
        <% end %>
        <% end %>
        /*var floorTexture = new THREE.ImageUtils.loadTexture( 'images/checkerboard.jpg' );
        floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
        floorTexture.repeat.set( 10, 10 );
        var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );*/

        // RENDERER
        if ( Detector.webgl ) {
          renderer = new THREE.WebGLRenderer( {antialias:true} );
        }
        else {
          renderer = new THREE.CanvasRenderer(); 
        }
        renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
        container.appendChild( renderer.domElement );

        // EVENTS
        //THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
        window.addEventListener( 'resize', onWindowResize, false );
      };

      function onWindowResize( event ) {
        SCREEN_HEIGHT = window.innerHeight;
        SCREEN_WIDTH  = window.innerWidth;

        renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );

        camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
        camera.updateProjectionMatrix();
      };

      function animate() {
        requestAnimationFrame( animate );
        render();
        input();
      };

      function render() {
        controls.update( clock.getDelta() );
        renderer.render( scene, camera );
      };

      function input() {
        controls.moveState.forward = keyboard.pressed("w");
        controls.moveState.back = keyboard.pressed("s");
        controls.moveState.left = keyboard.pressed("a");
        controls.moveState.right = keyboard.pressed("d");

        controls.moveState.pitchUp = keyboard.pressed("up");
        controls.moveState.pitchDown = keyboard.pressed("down");
        controls.moveState.yawLeft = keyboard.pressed("left");
        controls.moveState.yawRight = keyboard.pressed("right");

        controls.updateMovementVector();
        controls.updateRotationVector();

        //case 82: /*R*/ controls.moveState.up = 1; break;
        //case 70: /*F*/ controls.moveState.down = 1; break;
        //controls.movementSpeedMultiplier = .1;
        //case 81: /*Q*/ controls.moveState.rollLeft = 1; break;
        //case 69: /*E*/ controls.moveState.rollRight = 1; break;
      }
    </script>
  </body>
</html>
